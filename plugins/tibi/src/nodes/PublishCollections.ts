import { CocoonNode, CocoonNodeContext } from '@cocoon/types';
import matter from 'gray-matter';
import _ from 'lodash';
import path from 'path';
import { CollectionData } from './CreateCollection';
import { ItemWithSlug } from './Slugify';

const castFunction = <T = Function>(fn: string | T): T =>
  _.isString(fn) ? (eval(fn) as T) : (fn as T);

export interface Ports {
  attributes: string[];
  collections: CollectionData | CollectionData[];
  collectionsPath: string;
  data: ItemWithSlug[];
  details: string;
  detailsPath: string;
}

export const PublishCollections: CocoonNode<Ports> = {
  category: 'I/O',
  description: `Publishes a list of collections as markdown files with a frontmatter.

It will create a document for each collection, as well as a document for each unique item across all collections.

Existing documents in the details path will be updated with the new data.`,

  in: {
    attributes: {
      hide: true,
      description: `The list of attributes that will be written into detail documents. If omitted, all data attributes will be written.`,
    },
    collections: {
      required: true,
      description: `Collections generated by "CreateCollections" nodes.`,
    },
    collectionsPath: {
      defaultValue: 'collections',
      description: `Path to where the collection documents are published.`,
      hide: true,
    },
    data: {
      required: true,
      description: `Data for the items to be published`,
    },
    details: {
      defaultValue: () => false,
      description: `A function that given an item, determines whether to publish the detail page regardless of whether it is in a collection.`,
    },
    detailsPath: {
      defaultValue: 'details',
      description: `Path to where the detail documents are published.`,
      hide: true,
    },
  },

  out: {
    data: {
      description: `Original data of documents that were published, with the addition of documents that were published bu no longer have associated data (orphans). Data items will additionally contain a list of collections they were published to in the "collection" attribute.`,
    },
  },

  defaultPort: {
    incoming: false,
    name: 'published',
  },

  async process(context) {
    const { fs } = context;
    const ports = context.ports.read();
    const { data, details } = ports;
    const detailsPath = await fs.createPath(ports.detailsPath, {
      root: context.definitions.root,
    });

    // Create collections
    const collections = await writeCollectionDocuments(ports, context);

    // Create a list of all detail page slugs
    const doPublish = castFunction<(item: any) => any>(details);
    const detailSlugs: string[] = _.uniq([
      // Collect all existing collection items
      ...((await fs.resolveDirectoryContents(detailsPath)) as string[])
        .map(x => path.basename(x))
        .filter(x => x.endsWith('.md'))
        .map(x => path.basename(x, '.md')),
      // Collect currently listed collection items
      ...collections.flatMap(c => c.items).map(x => x.slug),
      // Collect specifically requested items
      ...data.filter(doPublish).map(x => x.slug),
    ]);

    // Map data by slugs
    const dataBySlug = data.reduce((all, item, i) => {
      all[item.slug] = item;
      return all;
    }, {});

    // Show debug info
    const slugsWithoutData = detailSlugs.filter(x => !(x in dataBySlug));
    context.debug(
      `collected ${detailSlugs.length} detail slugs, ${slugsWithoutData.length} of which are not in the data`,
      slugsWithoutData
    );

    // Resolve data for detail page
    const detailDataBySlug = (await Promise.all(
      detailSlugs.map(async slug =>
        slug in dataBySlug
          ? dataBySlug[slug]
          : // Read existing item if we can't find new data for it
            (await readDocument(fs, path.join(detailsPath, `${slug}.md`))).data
      )
    ))
      // Annotate detail data with collection info
      .map(item => ({
        $collections: createCollectionInfo(collections, item.slug),
        ...item,
      }))
      // Map detail data by slug
      .reduce((all, item) => {
        all[item.slug] = item;
        return all;
      }, {});

    // Write detail documents
    context.debug(`writing details documents to "${detailsPath}"`);
    const published = await Promise.all(
      Object.keys(detailDataBySlug).map(async slug =>
        writeDocument(
          fs,
          path.resolve(detailsPath, `${slug}.md`),
          {
            slug,
            ...detailDataBySlug[slug],
          },
          ports.attributes
        )
      )
    );

    // Write published data
    context.ports.write({ data: Object.values(detailDataBySlug) });

    return `Published ${collections.length} collections with ${published.length} items`;
  },
};

async function readDocument(fs: CocoonNodeContext['fs'], documentPath: string) {
  return matter(await fs.readFile(documentPath));
}

function pruneObject(obj: object, attributes?: string[]) {
  return attributes ? _.pick(obj, attributes) : obj;
}

async function writeDocument(
  fs: CocoonNodeContext['fs'],
  documentPath: string,
  data: object,
  attributes?: string[]
) {
  const options: any = {
    sortKeys: true,
  };
  if (await fs.checkPath(documentPath)) {
    // Existing templates have their front matter updated. That way they
    // can contain manual content as well.
    const parsed = matter(await fs.readFile(documentPath));
    const prunedData = pruneObject(_.assign(parsed.data, data), attributes);
    await fs.writeFile(
      documentPath,
      matter.stringify('\n' + parsed.content.trim(), prunedData, options)
    );
    return prunedData;
  } else {
    const prunedData = pruneObject(data, attributes);
    await fs.writeFile(documentPath, matter.stringify('', prunedData, options));
    return prunedData;
  }
}

async function writeCollectionDocuments(
  ports: Ports,
  context: CocoonNodeContext<Ports>
) {
  const { fs } = context;
  const collections = _.castArray(ports.collections);
  const collectionsPath = await fs.createPath(ports.collectionsPath, {
    root: context.definitions.root,
  });
  const results = await Promise.all(
    collections.map(async collectionData => {
      const id = collectionData.meta.id;
      const collectionPath = path.resolve(collectionsPath, `${id}.md`);
      await writeDocument(context.fs, collectionPath, {
        ...collectionData.meta,
        items: collectionData.items.map(x => x.slug),
      });
      return { id, path: collectionPath };
    })
  );
  context.debug(`wrote ${results.length} collection documents`, results);
  return collections;
}

function createCollectionInfo(collections: CollectionData[], slug: string) {
  return collections
    .map(collection => ({
      position: collection.items.findIndex(x => x.slug === slug),
      id: collection.meta.id,
    }))
    .filter(collection => collection.position >= 0)
    .reduce((all, item) => {
      all[item.id] = item.position;
      return all;
    }, {});
}
